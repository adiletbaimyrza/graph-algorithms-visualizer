const pseudocodes = {
  bfs: [
    { indent: 0, content: 'function bfs(start, graph) {' },
    { indent: 20, content: 'const queue = [start]' },
    { indent: 20, content: 'const visited = new Set()' },
    { indent: 20, content: 'while (queue.length) {' },
    { indent: 40, content: 'const vertex = queue.shift()' },
    { indent: 40, content: 'if (!visited.has(vertex)) {' },
    { indent: 60, content: 'visited.add(vertex)' },
    { indent: 60, content: 'for (const neighbor of graph[vertex]) {' },
    { indent: 80, content: 'if (!visited.has(neighbor)) {' },
    { indent: 100, content: 'queue.push(neighbor)' },
    { indent: 80, content: '}' },
    { indent: 60, content: '}' },
    { indent: 40, content: '}' },
    { indent: 20, content: '}' },
    { indent: 0, content: '}' },
  ],
  dfs: [
    { indent: 0, content: 'function dfs(graph, start) {' },
    { indent: 20, content: 'const stack = [start]' },
    { indent: 20, content: 'const visited = new Set()' },
    { indent: 20, content: 'while (stack.length) {' },
    { indent: 40, content: 'const vertex = stack.pop()' },
    { indent: 40, content: 'if (!visited.has(vertex)) {' },
    { indent: 60, content: 'visited.add(vertex)' },
    { indent: 60, content: 'for (const neighbor of graph[vertex]) {' },
    { indent: 80, content: 'if (!visited.has(neighbor)) {' },
    { indent: 100, content: 'stack.push(neighbor)' },
    { indent: 80, content: '}' },
    { indent: 60, content: '}' },
    { indent: 40, content: '}' },
    { indent: 20, content: '}' },
    { indent: 0, content: '}' },
  ],
  prim: [
    { indent: 0, content: 'function prim(start, graph, weights): {' },
    { indent: 20, content: 'const minHeap = new MinHeap()' },
    { indent: 20, content: 'const visited = new Set()' },
    { indent: 20, content: 'visited.add(start)' },
    { indent: 20, content: 'for (const neighbor of graph[start]) {' },
    { indent: 60, content: 'minHeap.insert([start, neighbor, weights[start][neighbor])' },
    { indent: 20, content: '}' },
    { indent: 20, content: 'while (minHeap.length) {' },
    { indent: 40, content: 'const [from, to, weight] = minHeap.extractMin()' },
    { indent: 40, content: 'visited.add(to)' },
    { indent: 40, content: 'for (const neighbor of graph[to]) {' },
    { indent: 60, content: 'if (!visited.has(neighbor) {' },
    { indent: 80, content: 'minHeap.insert([to, neighbor, weights[to][neighbor])' },
    { indent: 60, content: '}' },
    { indent: 40, content: '}' },
    { indent: 20, content: '}' },
    { indent: 0, content: '}' },
  ],
}

export default pseudocodes
